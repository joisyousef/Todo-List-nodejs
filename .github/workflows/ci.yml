name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: docker.io
  # Pull your Docker Hub username from a secret:
  NAMESPACE: ${{ secrets.DOCKERHUB_USERNAME }}
  IMAGE_NAME: todo-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests (if you have any)
      run: npm test --if-present

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    # Only on actual pushes to master (not PRs)
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata (tags & labels)
      id: meta
      uses: docker/metadata-action@v5
      with:
        # Use your namespace explicitly
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}
        tags: |
          # Tag branch names for non-master
          type=ref,event=branch
          # Tag commit SHA for immutability
          type=sha,prefix=sha-
          # Tag 'latest' on the default branch
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=todo-app
          org.opencontainers.image.description=Node.js Todo Application
          org.opencontainers.image.vendor=${{ env.NAMESPACE }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Confirm image tags
      run: |
        echo "âœ… Pushed image tags:"
        echo "${{ steps.meta.outputs.tags }}"
